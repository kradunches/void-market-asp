services:
  asp.apigateway:
    container_name: void-market-asp-asp.api-gateway
    build:
      context: .
      dockerfile: ./ApiGateway/Dockerfile
    ports:
      - "4030:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
    networks:
      - void-market-network
    depends_on:
      - asp.order-svc
      - asp.payment-svc
      - asp.users-svc

  asp.order-svc:
    container_name: void-market-asp-asp.order-svc
    build:
      context: .
      dockerfile: ./OrderService/Dockerfile
    ports:
      - "4033:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
    networks:
      - void-market-network
    depends_on:
      - postgres
      - rabbitmq

  asp.payment-svc:
    container_name: void-market-asp-asp.payment-svc
    build:
      context: .
      dockerfile: ./PaymentService/Dockerfile
    ports:
      - "4032:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
    networks:
      - void-market-network
    depends_on:
      - asp.order-svc

  asp.users-svc:
    container_name: void-market-asp-asp.users-svc
    build:
      context: .
      dockerfile: ./UserService/Dockerfile
    ports:
      - "4031:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
    networks:
      - void-market-network
    depends_on:
      - mongo
        
##############################################
# оставил для шаблона
  
  mongo:
    image: mongo:6
    container_name: mongodb_void_asp
    ports:
      - "27018:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=void-marked
    restart: unless-stopped
    networks:
      - void-market-network

  mongo-express:
    image: mongo-express
    container_name: mongo-express_void_asp
    ports:
      - "8082:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=password
    depends_on:
      - mongo
    restart: unless-stopped
    networks:
      - void-market-network

  postgres:
    image: postgres:15
    container_name: postgres_void_asp
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: void-market
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - void-market-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d void-market"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq_void_asp
    ports:
      - "5673:5672"     # основной порт для приложений
      - "15673:15672"   # порт веб-интерфейса (http://localhost:15672)
    volumes:
      - ./rabbitmq_void_asp_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    restart: unless-stopped
    networks:
      - void-market-network

########################### 
#monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_void_asp
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prom-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=15d"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    networks:
      - void-market-network
    restart: unless-stopped
  
  # для мониторинга контейнеров
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    ports:
      - "9001:8080"
    networks: 
      - void-market-network
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      # Если containerd:
      # - /var/run/containerd/containerd.sock:/var/run/containerd/containerd.sock:ro
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana_void_asp
    restart: unless-stopped
    depends_on: [prometheus]
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    
volumes:
  prom-data:
  grafana-data:
  mongo-data:
  pgdata:

networks:
  void-market-network:
    name: void-market-network
    driver: bridge
